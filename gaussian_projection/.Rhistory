library(truncnorm)
library(latex2exp)
set.seed(3)
n = 50
theta0 = -0.
x.bar <- mean(rnorm(n,theta0,1))
#x.bar = 0.5
#x.bar = 0, .75
#x0 <- x.bar
sigma.n.sq <- 1/(n+0.001)
theta.n <- sigma.n.sq * n * x.bar
alpha <- -(theta.n/ sqrt(sigma.n.sq))
W1 <- pnorm(alpha)
W2 <- 1 - W1
C1 <- dnorm(0, x.bar, sqrt(1/n))
C2 <- (C1 * dtruncnorm(0, 0, Inf, 0, sqrt(1000)))/dtruncnorm(0, 0, Inf, theta.n, sqrt(sigma.n.sq))
w1 <- W1/C1
w2 <- W2/C2
w1 <- w1/(sum(w1+w2))
w2 <- 1 - w1
print(w1)
Z <- 1-pnorm(alpha)
unconstrained.mean <- theta.n
trunc.mean <- theta.n + sqrt(sigma.n.sq)*dnorm(alpha)/Z
proj.mean <- Z*trunc.mean
projnorm <- function(x){
if (x == 0) return(pnorm(alpha))
if (x>0) return(Z*dtruncnorm(x, 0, Inf, theta.n, sqrt(sigma.n.sq)))
else return(0)
}
prior <- function(x, w1, w2){
if (x == 0) return(w1)
if (x>0) return(w2*dtruncnorm(x, 0, Inf, 0, sqrt(1000)))
else return(0)
}
a <- -0.2
b <- 1
x <- seq(a,b,.01)
x.neg <- seq(a,-0.01,0.01)
x.pos <- seq(0.01, b, 0.01)
# jpeg("eg1_4.jpeg", width = 5, height = 5, units = 'in', res = 300)
plot(x.pos, sapply(x.pos, function(ind) projnorm(ind)), col="red", type="l",
xlab=TeX("$\\theta$"), lwd = 3, xlim=c(-0.05,1), ylim = c(0,3), ylab="Density",
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(x.pos, sapply(x.pos, function(ind) prior(ind, w1, w2)), col="green",
lwd=3, lty=2)
grid()
segments(0,0,0,projnorm(0),col="red",lwd=3)
segments(0,0,0,prior(0,w1,w2),col="green",lwd=3, lty = 2)
abline(h=0, lwd=2,col=rgb(0,0,0,alpha=0.5))
legend(0.55,3,c("Prior", "Posterior"), bty="n",
col=c("green","red"),lty=c(1,2), lwd=3,cex=1.4)
#dev.off()
library(truncnorm)
library(latex2exp)
set.seed(3)
n = 50
theta0 = -0.5
x.bar <- mean(rnorm(n,theta0,1))
#x.bar = 0.5
#x.bar = 0, .75
#x0 <- x.bar
sigma.n.sq <- 1/(n+0.001)
theta.n <- sigma.n.sq * n * x.bar
alpha <- -(theta.n/ sqrt(sigma.n.sq))
W1 <- pnorm(alpha)
W2 <- 1 - W1
C1 <- dnorm(0, x.bar, sqrt(1/n))
C2 <- (C1 * dtruncnorm(0, 0, Inf, 0, sqrt(1000)))/dtruncnorm(0, 0, Inf, theta.n, sqrt(sigma.n.sq))
w1 <- W1/C1
w2 <- W2/C2
w1 <- w1/(sum(w1+w2))
w2 <- 1 - w1
print(w1)
Z <- 1-pnorm(alpha)
unconstrained.mean <- theta.n
trunc.mean <- theta.n + sqrt(sigma.n.sq)*dnorm(alpha)/Z
proj.mean <- Z*trunc.mean
projnorm <- function(x){
if (x == 0) return(pnorm(alpha))
if (x>0) return(Z*dtruncnorm(x, 0, Inf, theta.n, sqrt(sigma.n.sq)))
else return(0)
}
prior <- function(x, w1, w2){
if (x == 0) return(w1)
if (x>0) return(w2*dtruncnorm(x, 0, Inf, 0, sqrt(1000)))
else return(0)
}
a <- -0.2
b <- 1
x <- seq(a,b,.01)
x.neg <- seq(a,-0.01,0.01)
x.pos <- seq(0.01, b, 0.01)
# jpeg("eg1_4.jpeg", width = 5, height = 5, units = 'in', res = 300)
plot(x.pos, sapply(x.pos, function(ind) projnorm(ind)), col="red", type="l",
xlab=TeX("$\\theta$"), lwd = 3, xlim=c(-0.05,1), ylim = c(0,3), ylab="Density",
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(x.pos, sapply(x.pos, function(ind) prior(ind, w1, w2)), col="green",
lwd=3, lty=2)
grid()
segments(0,0,0,projnorm(0),col="red",lwd=3)
segments(0,0,0,prior(0,w1,w2),col="green",lwd=3, lty = 2)
abline(h=0, lwd=2,col=rgb(0,0,0,alpha=0.5))
legend(0.55,3,c("Prior", "Posterior"), bty="n",
col=c("green","red"),lty=c(1,2), lwd=3,cex=1.4)
#dev.off()
library(truncnorm)
library(latex2exp)
set.seed(3)
n = 50
theta0 = 0.5
x.bar <- mean(rnorm(n,theta0,1))
#x.bar = 0.5
#x.bar = 0, .75
#x0 <- x.bar
sigma.n.sq <- 1/(n+0.001)
theta.n <- sigma.n.sq * n * x.bar
alpha <- -(theta.n/ sqrt(sigma.n.sq))
W1 <- pnorm(alpha)
W2 <- 1 - W1
C1 <- dnorm(0, x.bar, sqrt(1/n))
C2 <- (C1 * dtruncnorm(0, 0, Inf, 0, sqrt(1000)))/dtruncnorm(0, 0, Inf, theta.n, sqrt(sigma.n.sq))
w1 <- W1/C1
w2 <- W2/C2
w1 <- w1/(sum(w1+w2))
w2 <- 1 - w1
print(w1)
Z <- 1-pnorm(alpha)
unconstrained.mean <- theta.n
trunc.mean <- theta.n + sqrt(sigma.n.sq)*dnorm(alpha)/Z
proj.mean <- Z*trunc.mean
projnorm <- function(x){
if (x == 0) return(pnorm(alpha))
if (x>0) return(Z*dtruncnorm(x, 0, Inf, theta.n, sqrt(sigma.n.sq)))
else return(0)
}
prior <- function(x, w1, w2){
if (x == 0) return(w1)
if (x>0) return(w2*dtruncnorm(x, 0, Inf, 0, sqrt(1000)))
else return(0)
}
a <- -0.2
b <- 1
x <- seq(a,b,.01)
x.neg <- seq(a,-0.01,0.01)
x.pos <- seq(0.01, b, 0.01)
# jpeg("eg1_4.jpeg", width = 5, height = 5, units = 'in', res = 300)
plot(x.pos, sapply(x.pos, function(ind) projnorm(ind)), col="red", type="l",
xlab=TeX("$\\theta$"), lwd = 3, xlim=c(-0.05,1), ylim = c(0,3), ylab="Density",
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(x.pos, sapply(x.pos, function(ind) prior(ind, w1, w2)), col="green",
lwd=3, lty=2)
grid()
segments(0,0,0,projnorm(0),col="red",lwd=3)
segments(0,0,0,prior(0,w1,w2),col="green",lwd=3, lty = 2)
abline(h=0, lwd=2,col=rgb(0,0,0,alpha=0.5))
legend(0.55,3,c("Prior", "Posterior"), bty="n",
col=c("green","red"),lty=c(1,2), lwd=3,cex=1.4)
#dev.off()
library(truncnorm)
library(latex2exp)
set.seed(3)
n = 50
theta0 = 0.5
x.bar <- mean(rnorm(n,theta0,1))
#x.bar = 0.5
#x.bar = 0, .75
#x0 <- x.bar
sigma.n.sq <- 1/(n+0.001)
theta.n <- sigma.n.sq * n * x.bar
alpha <- -(theta.n/ sqrt(sigma.n.sq))
W1 <- pnorm(alpha)
W2 <- 1 - W1
C1 <- dnorm(0, x.bar, sqrt(1/n))
C2 <- (C1 * dtruncnorm(0, 0, Inf, 0, sqrt(1000)))/dtruncnorm(0, 0, Inf, theta.n, sqrt(sigma.n.sq))
w1 <- W1/C1
w2 <- W2/C2
w1 <- w1/(sum(w1+w2))
w2 <- 1 - w1
print(w1)
Z <- 1-pnorm(alpha)
unconstrained.mean <- theta.n
trunc.mean <- theta.n + sqrt(sigma.n.sq)*dnorm(alpha)/Z
proj.mean <- Z*trunc.mean
projnorm <- function(x){
if (x == 0) return(pnorm(alpha))
if (x>0) return(Z*dtruncnorm(x, 0, Inf, theta.n, sqrt(sigma.n.sq)))
else return(0)
}
prior <- function(x, w1, w2){
if (x == 0) return(w1)
if (x>0) return(w2*dtruncnorm(x, 0, Inf, 0, sqrt(1000)))
else return(0)
}
a <- -0.2
b <- 1
x <- seq(a,b,.01)
x.neg <- seq(a,-0.01,0.01)
x.pos <- seq(0.01, b, 0.01)
# jpeg("eg1_4.jpeg", width = 5, height = 5, units = 'in', res = 300)
plot(x.pos, sapply(x.pos, function(ind) projnorm(ind)), col="red", type="l",
xlab=TeX("$\\theta$"), lwd = 3, xlim=c(-0.05,1), ylim = c(0,3), ylab="Density",
cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(x.pos, sapply(x.pos, function(ind) prior(ind, w1, w2)), col="green",
lwd=3, lty=2)
grid()
segments(0,0,0,projnorm(0),col="red",lwd=3)
segments(0,0,0,prior(0,w1,w2),col="green",lwd=3, lty = 2)
abline(h=0, lwd=2,col=rgb(0,0,0,alpha=0.5))
legend(0.55,3,c("Prior", "Posterior"), bty="n",
col=c("green","red"),lty=c(1,2), lwd=3,cex=1.4)
#dev.off()
library(truncnorm)
library(latex2exp)
set.seed(3)
n = 50
theta0 = 0.5
x.bar <- mean(rnorm(n,theta0,1))
#x.bar = 0.5
#x.bar = 0, .75
#x0 <- x.bar
sigma.n.sq <- 1/(n+0.001)
theta.n <- sigma.n.sq * n * x.bar
alpha <- -(theta.n/ sqrt(sigma.n.sq))
W1 <- pnorm(alpha)
W2 <- 1 - W1
C1 <- dnorm(0, x.bar, sqrt(1/n))
C2 <- (C1 * dtruncnorm(0, 0, Inf, 0, sqrt(1000)))/dtruncnorm(0, 0, Inf, theta.n, sqrt(sigma.n.sq))
w1 <- W1/C1
w2 <- W2/C2
w1 <- w1/(sum(w1+w2))
w2 <- 1 - w1
print(w1)
Z <- 1-pnorm(alpha)
unconstrained.mean <- theta.n
trunc.mean <- theta.n + sqrt(sigma.n.sq)*dnorm(alpha)/Z
proj.mean <- Z*trunc.mean
projnorm <- function(x){
if (x == 0) return(pnorm(alpha))
if (x>0) return(Z*dtruncnorm(x, 0, Inf, theta.n, sqrt(sigma.n.sq)))
else return(0)
}
prior <- function(x, w1, w2){
if (x == 0) return(w1)
if (x>0) return(w2*dtruncnorm(x, 0, Inf, 0, sqrt(1000)))
else return(0)
}
a <- -0.2
b <- 1
x <- seq(a,b,.01)
x.neg <- seq(a,-0.01,0.01)
x.pos <- seq(0.01, b, 0.01)
# jpeg("eg1_4.jpeg", width = 5, height = 5, units = 'in', res = 300)
plot(x.pos, sapply(x.pos, function(ind) projnorm(ind)), col="red", type="l",
xlab=TeX("$\\theta$"), lwd = 3, xlim=c(-0.05,1), ylim = c(0,3), ylab="Density",
cex.lab=1.5, cex.axis=1., cex.main=1.5, cex.sub=1.5)
lines(x.pos, sapply(x.pos, function(ind) prior(ind, w1, w2)), col="green",
lwd=3, lty=2)
grid()
segments(0,0,0,projnorm(0),col="red",lwd=3)
segments(0,0,0,prior(0,w1,w2),col="green",lwd=3, lty = 2)
abline(h=0, lwd=2,col=rgb(0,0,0,alpha=0.5))
legend(0.55,3,c("Prior", "Posterior"), bty="n",
col=c("green","red"),lty=c(1,2), lwd=3,cex=1.4)
#dev.off()
library(truncnorm)
library(latex2exp)
set.seed(3)
n = 50
theta0 = 0.5
x.bar <- mean(rnorm(n,theta0,1))
#x.bar = 0.5
#x.bar = 0, .75
#x0 <- x.bar
sigma.n.sq <- 1/(n+0.001)
theta.n <- sigma.n.sq * n * x.bar
alpha <- -(theta.n/ sqrt(sigma.n.sq))
W1 <- pnorm(alpha)
W2 <- 1 - W1
C1 <- dnorm(0, x.bar, sqrt(1/n))
C2 <- (C1 * dtruncnorm(0, 0, Inf, 0, sqrt(1000)))/dtruncnorm(0, 0, Inf, theta.n, sqrt(sigma.n.sq))
w1 <- W1/C1
w2 <- W2/C2
w1 <- w1/(sum(w1+w2))
w2 <- 1 - w1
print(w1)
Z <- 1-pnorm(alpha)
unconstrained.mean <- theta.n
trunc.mean <- theta.n + sqrt(sigma.n.sq)*dnorm(alpha)/Z
proj.mean <- Z*trunc.mean
projnorm <- function(x){
if (x == 0) return(pnorm(alpha))
if (x>0) return(Z*dtruncnorm(x, 0, Inf, theta.n, sqrt(sigma.n.sq)))
else return(0)
}
prior <- function(x, w1, w2){
if (x == 0) return(w1)
if (x>0) return(w2*dtruncnorm(x, 0, Inf, 0, sqrt(1000)))
else return(0)
}
a <- -0.2
b <- 1
x <- seq(a,b,.01)
x.neg <- seq(a,-0.01,0.01)
x.pos <- seq(0.01, b, 0.01)
# jpeg("eg1_4.jpeg", width = 5, height = 5, units = 'in', res = 300)
plot(x.pos, sapply(x.pos, function(ind) projnorm(ind)), col="red", type="l",
xlab=TeX("$\\theta$"), lwd = 3, xlim=c(-0.05,1), ylim = c(0,3), ylab="Density",
cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(x.pos, sapply(x.pos, function(ind) prior(ind, w1, w2)), col="green",
lwd=3, lty=2)
grid()
segments(0,0,0,projnorm(0),col="red",lwd=3)
segments(0,0,0,prior(0,w1,w2),col="green",lwd=3, lty = 2)
abline(h=0, lwd=2,col=rgb(0,0,0,alpha=0.5))
legend(0.55,3,c("Prior", "Posterior"), bty="n",
col=c("green","red"),lty=c(1,2), lwd=3,cex=1.4)
#dev.off()
library(truncnorm)
library(latex2exp)
set.seed(3)
n = 50
theta0 = 0
x.bar <- mean(rnorm(n,theta0,1))
#x.bar = 0.5
#x.bar = 0, .75
#x0 <- x.bar
sigma.n.sq <- 1/(n+0.001)
theta.n <- sigma.n.sq * n * x.bar
alpha <- -(theta.n/ sqrt(sigma.n.sq))
W1 <- pnorm(alpha)
W2 <- 1 - W1
C1 <- dnorm(0, x.bar, sqrt(1/n))
C2 <- (C1 * dtruncnorm(0, 0, Inf, 0, sqrt(1000)))/dtruncnorm(0, 0, Inf, theta.n, sqrt(sigma.n.sq))
w1 <- W1/C1
w2 <- W2/C2
w1 <- w1/(sum(w1+w2))
w2 <- 1 - w1
print(w1)
Z <- 1-pnorm(alpha)
unconstrained.mean <- theta.n
trunc.mean <- theta.n + sqrt(sigma.n.sq)*dnorm(alpha)/Z
proj.mean <- Z*trunc.mean
projnorm <- function(x){
if (x == 0) return(pnorm(alpha))
if (x>0) return(Z*dtruncnorm(x, 0, Inf, theta.n, sqrt(sigma.n.sq)))
else return(0)
}
prior <- function(x, w1, w2){
if (x == 0) return(w1)
if (x>0) return(w2*dtruncnorm(x, 0, Inf, 0, sqrt(1000)))
else return(0)
}
a <- -0.2
b <- 1
x <- seq(a,b,.01)
x.neg <- seq(a,-0.01,0.01)
x.pos <- seq(0.01, b, 0.01)
# jpeg("eg1_4.jpeg", width = 5, height = 5, units = 'in', res = 300)
plot(x.pos, sapply(x.pos, function(ind) projnorm(ind)), col="red", type="l",
xlab=TeX("$\\theta$"), lwd = 3, xlim=c(-0.05,1), ylim = c(0,3), ylab="Density",
cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(x.pos, sapply(x.pos, function(ind) prior(ind, w1, w2)), col="green",
lwd=3, lty=2)
grid()
segments(0,0,0,projnorm(0),col="red",lwd=3)
segments(0,0,0,prior(0,w1,w2),col="green",lwd=3, lty = 2)
abline(h=0, lwd=2,col=rgb(0,0,0,alpha=0.5))
legend(0.55,3,c("Prior", "Posterior"), bty="n",
col=c("green","red"),lty=c(1,2), lwd=3,cex=1.4)
#dev.off()
library(truncnorm)
library(latex2exp)
set.seed(3)
n = 50
theta0 = -0.5
x.bar <- mean(rnorm(n,theta0,1))
#x.bar = 0.5
#x.bar = 0, .75
#x0 <- x.bar
sigma.n.sq <- 1/(n+0.001)
theta.n <- sigma.n.sq * n * x.bar
alpha <- -(theta.n/ sqrt(sigma.n.sq))
W1 <- pnorm(alpha)
W2 <- 1 - W1
C1 <- dnorm(0, x.bar, sqrt(1/n))
C2 <- (C1 * dtruncnorm(0, 0, Inf, 0, sqrt(1000)))/dtruncnorm(0, 0, Inf, theta.n, sqrt(sigma.n.sq))
w1 <- W1/C1
w2 <- W2/C2
w1 <- w1/(sum(w1+w2))
w2 <- 1 - w1
print(w1)
Z <- 1-pnorm(alpha)
unconstrained.mean <- theta.n
trunc.mean <- theta.n + sqrt(sigma.n.sq)*dnorm(alpha)/Z
proj.mean <- Z*trunc.mean
projnorm <- function(x){
if (x == 0) return(pnorm(alpha))
if (x>0) return(Z*dtruncnorm(x, 0, Inf, theta.n, sqrt(sigma.n.sq)))
else return(0)
}
prior <- function(x, w1, w2){
if (x == 0) return(w1)
if (x>0) return(w2*dtruncnorm(x, 0, Inf, 0, sqrt(1000)))
else return(0)
}
a <- -0.2
b <- 1
x <- seq(a,b,.01)
x.neg <- seq(a,-0.01,0.01)
x.pos <- seq(0.01, b, 0.01)
# jpeg("eg1_4.jpeg", width = 5, height = 5, units = 'in', res = 300)
plot(x.pos, sapply(x.pos, function(ind) projnorm(ind)), col="red", type="l",
xlab=TeX("$\\theta$"), lwd = 3, xlim=c(-0.05,1), ylim = c(0,3), ylab="Density",
cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(x.pos, sapply(x.pos, function(ind) prior(ind, w1, w2)), col="green",
lwd=3, lty=2)
grid()
segments(0,0,0,projnorm(0),col="red",lwd=3)
segments(0,0,0,prior(0,w1,w2),col="green",lwd=3, lty = 2)
abline(h=0, lwd=2,col=rgb(0,0,0,alpha=0.5))
legend(0.55,3,c("Prior", "Posterior"), bty="n",
col=c("green","red"),lty=c(1,2), lwd=3,cex=1.4)
#dev.off()
library(Directional)
library(MASS)
library(mvtnorm)
set.seed(3)
m <- rep(1, 3)
m <- c(2,1,0)
m <- m/sqrt(sum(m^2))
x <- rvmf(1000, m, 10)
dat <- data.frame("x" = x[,1], "y" = x[,2], "z" =x[,3])
pairs(dat, main="von Mises-Fisher distribution")
y <- mvrnorm(1000, mu=m, Sigma = 0.1*diag(3))
yProj <- y
for (i in 1:1000){
yProj[i,] <- y[i,]/sqrt(sum(y[i,]^2))
}
dat2 <- data.frame("x" = yProj[,1], "y" = yProj[,2], "z" =yProj[,3])
pairs(dat2, main = "Projected Spherical Normal distribution")
z <- rmvt(1000, delta=m, sigma = 0.1*diag(3), df=3)
zProj <- z
for (i in 1:1000){
zProj[i,] <- z[i,]/sqrt(sum(z[i,]^2))
}
dat3 <- data.frame("x" = zProj[,1], "y" = zProj[,2], "z" =zProj[,3])
pairs(dat3, main = "Projected Sperical t distribution")
install.packages(c("Directional", "mvtnorm"))
library(Directional)
library(MASS)
library(mvtnorm)
set.seed(3)
m <- rep(1, 3)
m <- c(2,1,0)
m <- m/sqrt(sum(m^2))
x <- rvmf(1000, m, 10)
dat <- data.frame("x" = x[,1], "y" = x[,2], "z" =x[,3])
pairs(dat, main="von Mises-Fisher distribution")
y <- mvrnorm(1000, mu=m, Sigma = 0.1*diag(3))
yProj <- y
for (i in 1:1000){
yProj[i,] <- y[i,]/sqrt(sum(y[i,]^2))
}
dat2 <- data.frame("x" = yProj[,1], "y" = yProj[,2], "z" =yProj[,3])
pairs(dat2, main = "Projected Spherical Normal distribution")
z <- rmvt(1000, delta=m, sigma = 0.1*diag(3), df=3)
zProj <- z
for (i in 1:1000){
zProj[i,] <- z[i,]/sqrt(sum(z[i,]^2))
}
dat3 <- data.frame("x" = zProj[,1], "y" = zProj[,2], "z" =zProj[,3])
pairs(dat3, main = "Projected Sperical t distribution")
library(Directional)
library(MASS)
library(mvtnorm)
install.packages("Directional")
library(Directional)
library(MASS)
library(mvtnorm)
library(Directional)
set.seed(3)
## Generate data
n <- 100
#theta <- rep(1/sqrt(3), 3)
theta <- c(4,2,1)
theta <- theta/sqrt(sum(theta^2))
X <- mvrnorm(n, mu=theta, Sigma = 10*diag(3))
XBar <- colMeans(X)
#################################################
## Posterior : VMF
#################################################
mu <- rep(1/sqrt(3), 3)
#mu <- theta
mu <- mu/sqrt(sum(mu^2))
phi <- 1
temp <- 0.1*n*XBar + phi*mu
phin <- sqrt(sum(temp^2))
mun <- temp/ phin
x <- rvmf(1000, mun, phin)
dat <- data.frame("x" = x[,1], "y" = x[,2], "z" =x[,3])
# jpeg("eg2FisherPost.jpeg", width = 5, height = 5, units = 'in', res = 300)
pairs(dat, main="von Mises-Fisher distribution")
#dev.off()
dat.mean <- colMeans(dat)
mean((dat.mean - theta)^2)
apply(dat, 2, function(x) quantile(x,probs = c(0.025, 0.975)))
install.packages("Directional")
Rfast
install.packages("Rfast")
install.packages("Directional", dependencies = FALSE)
library(Directional)
