plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="")
par(mfrow=c(1,2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(0,0,0,0))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(0.1,0.1,0.1,0.1))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(1,1,1,1))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(2,1,1,1))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,2,1,1))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,4,1,1))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,2,1,1))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,2,2,1))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,2,2,1), oma=c(4, 4, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,2,2,0), oma=c(4, 4, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,2,0.1,0), oma=c(4, 4, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach"
par(mfrow=c(1,2),mar=c(5,0.2,2,0), oma=c(4, 4, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,0.2,2,0), oma=c(4, 4, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,0.2,2,0.2), oma=c(4, 4, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,0.2,2,0.4), oma=c(4, 4, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="")
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,0.2,2,0.4), oma=c(4, 4, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="", yaxt='n')
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,0.2,2,0.5), oma=c(4, 4, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="", yaxt='n')
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,0.2,2,0.5), oma=c(4, 1, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="", yaxt='n')
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,0.2,2,0.5), oma=c(1, 2, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="", yaxt='n')
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
(1,2),mar=c(5,0.2,2,0.5), oma=c(1, 10, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="", yaxt='n')
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,0.2,2,0.5), oma=c(1, 10, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="", yaxt='n')
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,0.2,2,0.5), oma=c(1, 2, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="", yaxt='n')
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(5,0.2,1.5,0.5), oma=c(1, 2, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="", yaxt='n')
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(4,0.2,2,0.5), oma=c(1, 2, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="", yaxt='n')
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(3.7,0.2,2,0.5), oma=c(1, 2, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="", yaxt='n')
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
par(mfrow=c(1,2),mar=c(4,0.2,2,0.5), oma=c(1, 2, 0.2, 0.2))
plot(post_samples[,1,1], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="", yaxt='n')
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
piPostProj[1,1,]
qualtile(piPostProj[1,1,], c(0.025,0.975))
quantile(piPostProj[1,1,], c(0.025,0.975))
quantile(post_samples[,1,1], c(0.025,0.975))
0.2296736 -1540230
0.2296736 -0.1540230
0.2628700 - 0.1920131
library(multinomineq)
library(dirmcmc)
k = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
X = matrix(k, 4,5)  #note: **NOT** byrow=T
A = matrix(c(-1, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1, 0, 0,  1, 1, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1,-1, 0,  1, 1, 1, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1,-1,-1,  1, 1, 1, 1,  0, 0, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1, 0, 0,  1, 1, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1,-1, 0,  1, 1, 1, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1,-1,-1,  1, 1, 1, 1,  0, 0, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1, 0, 0, 0,  1, 0, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1, 0, 0,  1, 1, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1,-1, 0,  1, 1, 1, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1,-1,-1,  1, 1, 1, 1),
ncol=16, byrow=TRUE)
b = c(0,0,0,0,0,0,0,0,0,0,0,0)
options = c(5,5,5,5)
N = 10000
B = 1
samp <- sampling_multinom(k=k, options=options, prior=rep(1,20), A=-A, b=b, M=N, burnin=B)
post_samples = array(0,dim=c(4,5,dim(samp)[1]))
for (n in 1:dim(samp)[1]) {
post_samples[,1:4,n] = matrix(samp[n,],4,4, byrow=T)
for (j in 1:4){
post_samples[j,5,n] = 1-sum(post_samples[j,1:4,n])
}
}
post_mean = apply(post_samples, c(1,2), mean)
# Bias:
predicted_means_constr = array(0,dim=c(4,5))
for (i in 1:4){predicted_means_constr[i,] = rowSums(X)[i]*post_mean[i,]}
mean(abs(X-predicted_means_constr))
par(mfrow=c(1,2),mar=c(4,0.2,2,0.5), oma=c(1, 2, 0.2, 0.2))
plot(post_samples[1,1,], type="l", xlab="", ylab="", ylim=c(0.12,0.3))
title(main="Traceplot for Gibbs sampler",xlab="MCMC iteration", ylab="theta_{11}")
plot(piPostProj[1,1,], type="l", xlab="", ylab="", yaxt='n')
title(main="Samples for projections approach", xlab="Sample", ylab="", ylim=c(0.12,0.3))
library(multinomineq)
library(dirmcmc)
k = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
X = matrix(k, 4,5)  #note: **NOT** byrow=T
A = matrix(c(-1, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1, 0, 0,  1, 1, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1,-1, 0,  1, 1, 1, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1,-1,-1,  1, 1, 1, 1,  0, 0, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1, 0, 0,  1, 1, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1,-1, 0,  1, 1, 1, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1,-1,-1,  1, 1, 1, 1,  0, 0, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1, 0, 0, 0,  1, 0, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1, 0, 0,  1, 1, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1,-1, 0,  1, 1, 1, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1,-1,-1,  1, 1, 1, 1),
ncol=16, byrow=TRUE)
b = c(0,0,0,0,0,0,0,0,0,0,0,0)
options = c(5,5,5,5)
N = 10000
B = 1
samp <- sampling_multinom(k=k, options=options, prior=rep(1,20), A=-A, b=b, M=N, burnin=B)
post_samples = array(0,dim=c(4,5,dim(samp)[1]))
for (n in 1:dim(samp)[1]) {
post_samples[,1:4,n] = matrix(samp[n,],4,4, byrow=T)
for (j in 1:4){
post_samples[j,5,n] = 1-sum(post_samples[j,1:4,n])
}
}
post_mean = apply(post_samples, c(1,2), mean)
# Bias:
predicted_means_constr = array(0,dim=c(4,5))
for (i in 1:4){predicted_means_constr[i,] = rowSums(X)[i]*post_mean[i,]}
mean(abs(X-predicted_means_constr))
library(multinomineq)
library(dirmcmc)
k = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
X = matrix(k, 4,5)  #note: **NOT** byrow=T
A = matrix(c(-1, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1, 0, 0,  1, 1, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1,-1, 0,  1, 1, 1, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1,-1,-1,  1, 1, 1, 1,  0, 0, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1, 0, 0,  1, 1, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1,-1, 0,  1, 1, 1, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1,-1,-1,  1, 1, 1, 1,  0, 0, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1, 0, 0, 0,  1, 0, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1, 0, 0,  1, 1, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1,-1, 0,  1, 1, 1, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1,-1,-1,  1, 1, 1, 1),
ncol=16, byrow=TRUE)
b = c(0,0,0,0,0,0,0,0,0,0,0,0)
options = c(5,5,5,5)
N = 10000
B = 1
samp <- sampling_multinom(k=k, options=options, prior=rep(1,20), A=-A, b=b, M=N, burnin=B)
post_samples = array(0,dim=c(4,5,dim(samp)[1]))
for (n in 1:dim(samp)[1]) {
post_samples[,1:4,n] = matrix(samp[n,],4,4, byrow=T)
for (j in 1:4){
post_samples[j,5,n] = 1-sum(post_samples[j,1:4,n])
}
}
post_mean = apply(post_samples, c(1,2), mean)
# Bias:
predicted_means_constr = array(0,dim=c(4,5))
for (i in 1:4){predicted_means_constr[i,] = rowSums(X)[i]*post_mean[i,]}
mean(abs(X-predicted_means_constr))
library(multinomineq)
library(dirmcmc)
k = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
X = matrix(k, 4,5)  #note: **NOT** byrow=T
A = matrix(c(-1, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1, 0, 0,  1, 1, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1,-1, 0,  1, 1, 1, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1,-1,-1,  1, 1, 1, 1,  0, 0, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1, 0, 0,  1, 1, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1,-1, 0,  1, 1, 1, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1,-1,-1,  1, 1, 1, 1,  0, 0, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1, 0, 0, 0,  1, 0, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1, 0, 0,  1, 1, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1,-1, 0,  1, 1, 1, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1,-1,-1,  1, 1, 1, 1),
ncol=16, byrow=TRUE)
b = c(0,0,0,0,0,0,0,0,0,0,0,0)
options = c(5,5,5,5)
N = 10000
B = 1
samp <- sampling_multinom(k=k, options=options, prior=rep(1,20), A=-A, b=b, M=N, burnin=B)
post_samples = array(0,dim=c(4,5,dim(samp)[1]))
for (n in 1:dim(samp)[1]) {
post_samples[,1:4,n] = matrix(samp[n,],4,4, byrow=T)
for (j in 1:4){
post_samples[j,5,n] = 1-sum(post_samples[j,1:4,n])
}
}
post_mean = apply(post_samples, c(1,2), mean)
# Bias:
predicted_means_constr = array(0,dim=c(4,5))
for (i in 1:4){predicted_means_constr[i,] = rowSums(X)[i]*post_mean[i,]}
mean(abs(X-predicted_means_constr))
CI_Gibbs = numeric(0, dim=c(2,4,5))
CI_proj = numeric(0, dim=c(2,4,5))
for (i in 1:4){
for (j in 1:5){
CI_Gibbs[,i,j] = quantile(post_samples[i,j,], c(0.025,0.975))
CI_proj[,i,j] = quantile(piPostProj[i,j,], c(0.025,0.975))
}
}
CI_proj = numeric(0, c(2,4,5))
CI_Gibbs = array(0, dim=c(2,4,5))
CI_proj = array(0, dim=c(2,4,5))
for (i in 1:4){
for (j in 1:5){
CI_Gibbs[,i,j] = quantile(post_samples[i,j,], c(0.025,0.975))
CI_proj[,i,j] = quantile(piPostProj[i,j,], c(0.025,0.975))
}
}
CI_Gibbs = array(0, dim=c(2,4,5))
CI_proj = array(0, dim=c(2,4,5))
CI_ratio = array(0, dim=c(4,5))
for (i in 1:4){
for (j in 1:5){
CI_Gibbs[,i,j] = quantile(post_samples[i,j,], c(0.025,0.975))
CI_proj[,i,j] = quantile(piPostProj[i,j,], c(0.025,0.975))
CI_ratio[i,j] = (CI_proj[2,i,j]-CI_proj[1,i,j])/(CI_Gibbs[2,i,j]-CI_Gibbs[1,i,j])
}
}
CI_ratio
CI_Gibbs = array(0, dim=c(2,4,5))
CI_proj = array(0, dim=c(2,4,5))
CI_ratio = array(0, dim=c(4,5))
for (i in 1:4){
for (j in 1:5){
CI_Gibbs[,i,j] = quantile(post_samples[i,j,], c(0.025,0.975))
CI_proj[,i,j] = quantile(piPostProj[i,j,], c(0.025,0.975))
CI_ratio[i,j] = (CI_Gibbs[2,i,j]-CI_Gibbs[1,i,j])/(CI_proj[2,i,j]-CI_proj[1,i,j])
}
}
CI_ratio
mean(CI_ratio)
library(quadprog)
rDirichlet = function(n, alpha){
l = length(alpha)
x = matrix(rgamma(l * n, alpha), ncol = l, byrow = TRUE)
sm = rowSums(x)
return(x/sm)
}
k = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
X = matrix(k, 4,5)  #note: **NOT** byrow=T
E = matrix(0,4,20)   # Equality restriction matrix E
for (i in 1:4) {E[i,seq(i,20,4)] = 1}
IE = matrix(0,12,20) # Inequality restriction matrix E
for (i in 1:3){
for (j in 1:4){
m = matrix(0,4,5)
m[i,1:j] = 1
m[(i+1),1:j] = -1
ind = 4*(i-1)+j
IE[ind,] = c(m)
}
}
A = rbind(E, -IE) # Total matrix
bvec = c(rep(1,4),rep(0,12))
Dmat = diag(length(k))
Amat = t(A)
a = 1
# Generate posterior samples:
N = 10000
piPost = array(0,dim=c(4,5,N))
for (i in 1:4){
piPost[i,,] = t(rDirichlet(N, alpha = (X[i,]+a)))
}
piPostMean = apply(piPost, c(1,2), mean)
# Project posterior samples:
piPostProj = array(0,dim=c(4,5,N))
distPost = double(N)
for (n in 1:N){
sol = solve.QP(Dmat, c(piPost[,,n]), Amat, bvec, meq = 4)$solution
piPostProj[,,n] = matrix(sol,4,5)
distPost[n] = norm(piPost[,,n]-piPostProj[,,n], type = "F")
}
piPostProjMean = apply(piPostProj, c(1,2), mean)
# Bias:
predicted_means = array(0,dim=c(4,5))
for (i in 1:4){predicted_means[i,] = rowSums(X)[i]*piPostMean[i,]}
mean(abs(X-predicted_means))
predicted_means_proj = array(0,dim=c(4,5))
for (i in 1:4){
predicted_means_proj[i,] = rowSums(X)[i]*piPostProjMean[i,]
}
mean(abs(X-predicted_means_proj))
library(quadprog)
rDirichlet = function(n, alpha){
l = length(alpha)
x = matrix(rgamma(l * n, alpha), ncol = l, byrow = TRUE)
sm = rowSums(x)
return(x/sm)
}
k = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
X = matrix(k, 4,5)  #note: **NOT** byrow=T
E = matrix(0,4,20)   # Equality restriction matrix E
for (i in 1:4) {E[i,seq(i,20,4)] = 1}
IE = matrix(0,12,20) # Inequality restriction matrix E
for (i in 1:3){
for (j in 1:4){
m = matrix(0,4,5)
m[i,1:j] = 1
m[(i+1),1:j] = -1
ind = 4*(i-1)+j
IE[ind,] = c(m)
}
}
A = rbind(E, -IE) # Total matrix
bvec = c(rep(1,4),rep(0,12))
Dmat = diag(length(k))
Amat = t(A)
a = 0.1
# Generate posterior samples:
N = 10000
piPost = array(0,dim=c(4,5,N))
for (i in 1:4){
piPost[i,,] = t(rDirichlet(N, alpha = (X[i,]+a)))
}
piPostMean = apply(piPost, c(1,2), mean)
# Project posterior samples:
piPostProj = array(0,dim=c(4,5,N))
distPost = double(N)
for (n in 1:N){
sol = solve.QP(Dmat, c(piPost[,,n]), Amat, bvec, meq = 4)$solution
piPostProj[,,n] = matrix(sol,4,5)
distPost[n] = norm(piPost[,,n]-piPostProj[,,n], type = "F")
}
piPostProjMean = apply(piPostProj, c(1,2), mean)
# Bias:
predicted_means = array(0,dim=c(4,5))
for (i in 1:4){predicted_means[i,] = rowSums(X)[i]*piPostMean[i,]}
mean(abs(X-predicted_means))
predicted_means_proj = array(0,dim=c(4,5))
for (i in 1:4){
predicted_means_proj[i,] = rowSums(X)[i]*piPostProjMean[i,]
}
mean(abs(X-predicted_means_proj))
library(quadprog)
rDirichlet = function(n, alpha){
l = length(alpha)
x = matrix(rgamma(l * n, alpha), ncol = l, byrow = TRUE)
sm = rowSums(x)
return(x/sm)
}
k = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
X = matrix(k, 4,5)  #note: **NOT** byrow=T
E = matrix(0,4,20)   # Equality restriction matrix E
for (i in 1:4) {E[i,seq(i,20,4)] = 1}
IE = matrix(0,12,20) # Inequality restriction matrix E
for (i in 1:3){
for (j in 1:4){
m = matrix(0,4,5)
m[i,1:j] = 1
m[(i+1),1:j] = -1
ind = 4*(i-1)+j
IE[ind,] = c(m)
}
}
A = rbind(E, -IE) # Total matrix
bvec = c(rep(1,4),rep(0,12))
Dmat = diag(length(k))
Amat = t(A)
a = 0.01
# Generate posterior samples:
N = 10000
piPost = array(0,dim=c(4,5,N))
for (i in 1:4){
piPost[i,,] = t(rDirichlet(N, alpha = (X[i,]+a)))
}
piPostMean = apply(piPost, c(1,2), mean)
# Project posterior samples:
piPostProj = array(0,dim=c(4,5,N))
distPost = double(N)
for (n in 1:N){
sol = solve.QP(Dmat, c(piPost[,,n]), Amat, bvec, meq = 4)$solution
piPostProj[,,n] = matrix(sol,4,5)
distPost[n] = norm(piPost[,,n]-piPostProj[,,n], type = "F")
}
piPostProjMean = apply(piPostProj, c(1,2), mean)
# Bias:
predicted_means = array(0,dim=c(4,5))
for (i in 1:4){predicted_means[i,] = rowSums(X)[i]*piPostMean[i,]}
mean(abs(X-predicted_means))
predicted_means_proj = array(0,dim=c(4,5))
for (i in 1:4){
predicted_means_proj[i,] = rowSums(X)[i]*piPostProjMean[i,]
}
mean(abs(X-predicted_means_proj))
library(multinomineq)
library(dirmcmc)
k = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
X = matrix(k, 4,5)  #note: **NOT** byrow=T
A = matrix(c(-1, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1, 0, 0,  1, 1, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1,-1, 0,  1, 1, 1, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1,-1,-1,  1, 1, 1, 1,  0, 0, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1, 0, 0,  1, 1, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1,-1, 0,  1, 1, 1, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1,-1,-1,  1, 1, 1, 1,  0, 0, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1, 0, 0, 0,  1, 0, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1, 0, 0,  1, 1, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1,-1, 0,  1, 1, 1, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1,-1,-1,  1, 1, 1, 1),
ncol=16, byrow=TRUE)
b = c(0,0,0,0,0,0,0,0,0,0,0,0)
options = c(5,5,5,5)
N = 10000
B = 1
samp <- sampling_multinom(k=k, options=options, prior=rep(0.01,20), A=-A, b=b, M=N, burnin=B)
post_samples = array(0,dim=c(4,5,dim(samp)[1]))
for (n in 1:dim(samp)[1]) {
post_samples[,1:4,n] = matrix(samp[n,],4,4, byrow=T)
for (j in 1:4){
post_samples[j,5,n] = 1-sum(post_samples[j,1:4,n])
}
}
post_mean = apply(post_samples, c(1,2), mean)
# Bias:
predicted_means_constr = array(0,dim=c(4,5))
for (i in 1:4){predicted_means_constr[i,] = rowSums(X)[i]*post_mean[i,]}
mean(abs(X-predicted_means_constr))
