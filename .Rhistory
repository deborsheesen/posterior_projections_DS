predicted_means
X/predicted_means
piPostProjMean = apply(piPostProj, 1:2, mean)
X = matrix(k, 4,5, byrow=T)
predicted_means_proj = array(0,dim=c(4,5))
for (i in 1:4){
predicted_means_proj[i,] = rowSums(X)[i]*piPostProjMean[i,]
}
X/predicted_means_proj
predicted_means_constr = array(0,dim=c(4,5))
for (i in 1:4){
predicted_means_constr[i,] = rowSums(X)[i]*post_mean[i,]
}
X/predicted_means_constr
X/predicted_means_constr
X/predicted_means_proj
error_proj = X/predicted_means_proj
error_constr = X/predicted_means_constr
mean(error_proj)
mean(error_constr)
library(quadprog)
rDirichlet = function(n, alpha){
l = length(alpha)
x = matrix(rgamma(l * n, alpha), ncol = l, byrow = TRUE)
sm = rowSums(x)
return(x/sm)
}
# Equality restriction matrix E
E = matrix(0,4,20)
for (i in 1:4) {E[i,seq(i,20,4)] = 1}
# Inequality restriction matrix IE
IE = matrix(0,15,20)
for (i in 1:3){
for (j in 1:5){
m = matrix(0,4,5)
m[i,1:j] = 1
m[(i+1),1:j] = -1
ind = 5*(i-1)+j
IE[ind,] = c(m)
}
}
A = rbind(E, IE) # Total matrix
X = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
data = matrix(X, 4,5)
a = 1 # alpha
## Solver basics:
Dmat = diag(length(X))
Amat = t(A)
bvec = c(rep(1,4),rep(0,15))
# Generate posterior samples:
N = 10000
piPost = array(0,dim=c(4,5,N))
for (i in 1:4){
piPost[i,,] = t(rDirichlet(N, alpha = (data[i,]+a)))
}
# Project posterior samples:
piPostProj = array(0,dim=c(4,5,N))
distPost = double(N)
for (n in 1:N){
temp = c(piPost[,,n])
sol = solve.QP(Dmat, temp, Amat, bvec, meq = 4)$solution
piPostProj[,,n] = matrix(sol,4,5)
distPost[n] = norm(piPost[,,n]-piPostProj[,,n], type = "F")
}
piPostProjMean = apply(piPostProj, 1:2, mean)
X = matrix(k, 4,5, byrow=T)
predicted_means_proj = array(0,dim=c(4,5))
for (i in 1:4){
predicted_means_proj[i,] = rowSums(X)[i]*piPostProjMean[i,]
}
error_proj = X/predicted_means_proj
mean(error_proj)
library(quadprog)
rDirichlet = function(n, alpha){
l = length(alpha)
x = matrix(rgamma(l * n, alpha), ncol = l, byrow = TRUE)
sm = rowSums(x)
return(x/sm)
}
# Equality restriction matrix E
E = matrix(0,4,20)
for (i in 1:4) {E[i,seq(i,20,4)] = 1}
# Inequality restriction matrix IE
IE = matrix(0,12,20)
for (i in 1:3){
for (j in 1:4){
m = matrix(0,4,4)
m[i,1:j] = 1
m[(i+1),1:j] = -1
ind = 4*(i-1)+j
IE[ind,] = c(m)
}
}
IE = matrix(0,12,20)
for (i in 1:3){
for (j in 1:4){
m = matrix(0,4,5)
m[i,1:j] = 1
m[(i+1),1:j] = -1
ind = 5*(i-1)+j
IE[ind,] = c(m)
}
}
IE = matrix(0,12,20)
for (i in 1:3){
for (j in 1:4){
m = matrix(0,4,5)
m[i,1:j] = 1
m[(i+1),1:j] = -1
ind = 4*(i-1)+j
IE[ind,] = c(m)
}
}
IE
library(quadprog)
rDirichlet = function(n, alpha){
l = length(alpha)
x = matrix(rgamma(l * n, alpha), ncol = l, byrow = TRUE)
sm = rowSums(x)
return(x/sm)
}
# Equality restriction matrix E
E = matrix(0,4,20)
for (i in 1:4) {E[i,seq(i,20,4)] = 1}
# Inequality restriction matrix IE
IE = matrix(0,12,20)
for (i in 1:3){
for (j in 1:4){
m = matrix(0,4,5)
m[i,1:j] = 1
m[(i+1),1:j] = -1
ind = 4*(i-1)+j
IE[ind,] = c(m)
}
}
A = rbind(E, IE) # Total matrix
X = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
data = matrix(X, 4,5)
a = 1 # alpha
## Solver basics:
Dmat = diag(length(X))
Amat = t(A)
bvec = c(rep(1,4),rep(0,15))
# Generate posterior samples:
N = 10000
piPost = array(0,dim=c(4,5,N))
for (i in 1:4){
piPost[i,,] = t(rDirichlet(N, alpha = (data[i,]+a)))
}
# Project posterior samples:
piPostProj = array(0,dim=c(4,5,N))
distPost = double(N)
for (n in 1:N){
temp = c(piPost[,,n])
sol = solve.QP(Dmat, temp, Amat, bvec, meq = 4)$solution
piPostProj[,,n] = matrix(sol,4,5)
distPost[n] = norm(piPost[,,n]-piPostProj[,,n], type = "F")
}
bvec = c(rep(1,4),rep(0,12))
# Generate posterior samples:
N = 10000
piPost = array(0,dim=c(4,5,N))
for (i in 1:4){
piPost[i,,] = t(rDirichlet(N, alpha = (data[i,]+a)))
}
# Project posterior samples:
piPostProj = array(0,dim=c(4,5,N))
distPost = double(N)
for (n in 1:N){
temp = c(piPost[,,n])
sol = solve.QP(Dmat, temp, Amat, bvec, meq = 4)$solution
piPostProj[,,n] = matrix(sol,4,5)
distPost[n] = norm(piPost[,,n]-piPostProj[,,n], type = "F")
}
piPostProjMean = apply(piPostProj, 1:2, mean)
X = matrix(k, 4,5, byrow=T)
predicted_means_proj = array(0,dim=c(4,5))
for (i in 1:4){
predicted_means_proj[i,] = rowSums(X)[i]*piPostProjMean[i,]
}
error_proj = X/predicted_means_proj
mean(error_proj)
dim(piPostProj)
piPostProj[,,1]
rowSums(piPostProj[,,1])
IE = matrix(0,15,20)
for (i in 1:3){
for (j in 1:5){
m = matrix(0,4,5)
m[i,1:j] = 1
m[(i+1),1:j] = -1
ind = 5*(i-1)+j
IE[ind,] = c(m)
}
}
A = rbind(E, IE) # Total matrix
X = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
data = matrix(X, 4,5)
a = 1 # alpha
## Solver basics:
Dmat = diag(length(X))
Amat = t(A)
#bvec = c(rep(1,4),rep(0,12))
bvec = c(rep(1,4),rep(0,15))
# Generate posterior samples:
N = 10000
piPost = array(0,dim=c(4,5,N))
for (i in 1:4){
piPost[i,,] = t(rDirichlet(N, alpha = (data[i,]+a)))
}
# Project posterior samples:
piPostProj = array(0,dim=c(4,5,N))
distPost = double(N)
for (n in 1:N){
temp = c(piPost[,,n])
sol = solve.QP(Dmat, temp, Amat, bvec, meq = 4)$solution
piPostProj[,,n] = matrix(sol,4,5)
distPost[n] = norm(piPost[,,n]-piPostProj[,,n], type = "F")
}
piPostProj[,,1]
rowSums(piPostProj[,,1])
dim(post_samples)
post_samples[1,,]
library(multinomineq)
library(dirmcmc)
k = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
model <- function(x)
x[1]<x[6] & x[1]+x[2]<x[6]+x[7] & x[1]+x[2]+x[3]<x[6]+x[7]+x[8] &
x[1]+x[2]+x[3]+x[4]<x[6]+x[7]+x[8]+x[9] &
x[6]<x[11] & x[6]+x[7]<x[11]+x[12] & x[6]+x[7]+x[8]<x[11]+x[12]+x[13] &
x[6]+x[7]+x[8]+x[9]<x[11]+x[12]+x[13]+x[14] &
x[11]<x[16] & x[11]+x[12]<x[16]+x[17] & x[11]+x[12]+x[13]<x[16]+x[17]+x[18] &
x[11]+x[12]+x[13]+x[14]<x[16]+x[17]+x[18]+x[19]
N = 10000
B = 2000
mcmc <- sampling_nonlinear(k=k, options=20, inside=model, M=N, burnin=B,  prior=rep(1,20))
library(multinomineq)
library(dirmcmc)
k = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
# model <- function(x)
#   x[1]<x[6] & x[1]+x[2]<x[6]+x[7] & x[1]+x[2]+x[3]<x[6]+x[7]+x[8] &
#   x[1]+x[2]+x[3]+x[4]<x[6]+x[7]+x[8]+x[9] &
#   x[6]<x[11] & x[6]+x[7]<x[11]+x[12] & x[6]+x[7]+x[8]<x[11]+x[12]+x[13] &
#   x[6]+x[7]+x[8]+x[9]<x[11]+x[12]+x[13]+x[14] &
#   x[11]<x[16] & x[11]+x[12]<x[16]+x[17] & x[11]+x[12]+x[13]<x[16]+x[17]+x[18] &
#   x[11]+x[12]+x[13]+x[14]<x[16]+x[17]+x[18]+x[19]
N = 10000
B = 2000
# mcmc <- sampling_nonlinear(k=k, options=20, inside=model, M=N, burnin=B,  prior=rep(1,20))
# dim(mcmc)
#
# ESS = numeric(19)
# for (i in 1:19) ESS[i] = (M-B)/iact(mcmc[,i])
#
# plot(colMeans(mcmc)/k[1:19])
A = matrix(c(-1, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1, 0, 0,  1, 1, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1,-1, 0,  1, 1, 1, 0,  0, 0, 0, 0,  0, 0, 0, 0,
-1,-1,-1,-1,  1, 1, 1, 1,  0, 0, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1, 0, 0,  1, 1, 0, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1,-1, 0,  1, 1, 1, 0,  0, 0, 0, 0,
0, 0, 0, 0, -1,-1,-1,-1,  1, 1, 1, 1,  0, 0, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1, 0, 0, 0,  1, 0, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1, 0, 0,  1, 1, 0, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1,-1, 0,  1, 1, 1, 0,
0, 0, 0, 0,  0, 0, 0, 0, -1,-1,-1,-1,  1, 1, 1, 1),
ncol=16, byrow=TRUE)
b = c(0,0,0,0,0,0,0,0,0,0,0,0)
options = c(5,5,5,5)
samp <- sampling_multinom(k=k, options=options, prior=rep(1,20), A=-A, b=b, M=N, burnin=B)
post_samples = array(0,dim=c(dim(samp)[1],4,5))
for (n in 1:dim(samp)[1]) {
post_samples[n,,1:4] = matrix(samp[n,],4,4, byrow=T)
for (j in 1:4){
post_samples[n,j,5] = 1-sum(post_samples[n,j,1:4])
}
}
dim(post_samples)
post_samples[1,,]
post_mean = apply(post_samples, c(2,3), mean)
X = matrix(k, 4,5, byrow=T)
X/post_mean
predicted_means_constr = array(0,dim=c(4,5))
for (i in 1:4){
predicted_means_constr[i,] = rowSums(X)[i]*post_mean[i,]
}
error_constr = X/predicted_means_constr
dim(post_samples)
post_samples[1,,]
library(quadprog)
rDirichlet = function(n, alpha){
l = length(alpha)
x = matrix(rgamma(l * n, alpha), ncol = l, byrow = TRUE)
sm = rowSums(x)
return(x/sm)
}
# Equality restriction matrix E
E = matrix(0,4,20)
for (i in 1:4) {E[i,seq(i,20,4)] = 1}
# Inequality restriction matrix IE
# IE = matrix(0,12,20)
# for (i in 1:3){
#   for (j in 1:4){
#     m = matrix(0,4,5)
#     m[i,1:j] = 1
#     m[(i+1),1:j] = -1
#     ind = 4*(i-1)+j
#     IE[ind,] = c(m)
#   }
# }
IE = matrix(0,15,20)
for (i in 1:3){
for (j in 1:5){
m = matrix(0,4,5)
m[i,1:j] = 1
m[(i+1),1:j] = -1
ind = 5*(i-1)+j
IE[ind,] = c(m)
}
}
A = rbind(E, IE) # Total matrix
X = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
data = matrix(X, 4,5)
a = 1 # alpha
## Solver basics:
Dmat = diag(length(X))
Amat = t(A)
#bvec = c(rep(1,4),rep(0,12))
bvec = c(rep(1,4),rep(0,15))
# Generate posterior samples:
N = 10000
piPost = array(0,dim=c(4,5,N))
for (i in 1:4){
piPost[i,,] = t(rDirichlet(N, alpha = (data[i,]+a)))
}
# Project posterior samples:
piPostProj = array(0,dim=c(4,5,N))
distPost = double(N)
for (n in 1:N){
temp = c(piPost[,,n])
sol = solve.QP(Dmat, temp, -Amat, bvec, meq = 4)$solution
piPostProj[,,n] = matrix(sol,4,5)
distPost[n] = norm(piPost[,,n]-piPostProj[,,n], type = "F")
}
piPostProjMean = apply(piPostProj, 1:2, mean)
X = matrix(k, 4,5, byrow=T)
predicted_means_proj = array(0,dim=c(4,5))
for (i in 1:4){
predicted_means_proj[i,] = rowSums(X)[i]*piPostProjMean[i,]
}
error_proj = X/predicted_means_proj
mean(error_proj)
piPostProj[1,,]
piPostProj[,,1]
error_constr = X/predicted_means_constr
mean(error_constr)
predicted_means_constr
post_mean
library(quadprog)
rDirichlet = function(n, alpha){
l = length(alpha)
x = matrix(rgamma(l * n, alpha), ncol = l, byrow = TRUE)
sm = rowSums(x)
return(x/sm)
}
# Equality restriction matrix E
E = matrix(0,4,20)
for (i in 1:4) {E[i,seq(i,20,4)] = 1}
# Inequality restriction matrix IE
# IE = matrix(0,12,20)
# for (i in 1:3){
#   for (j in 1:4){
#     m = matrix(0,4,5)
#     m[i,1:j] = 1
#     m[(i+1),1:j] = -1
#     ind = 4*(i-1)+j
#     IE[ind,] = c(m)
#   }
# }
IE = matrix(0,15,20)
for (i in 1:3){
for (j in 1:5){
m = matrix(0,4,5)
m[i,1:j] = 1
m[(i+1),1:j] = -1
ind = 5*(i-1)+j
IE[ind,] = c(m)
}
}
A = rbind(E, -IE) # Total matrix
X = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
data = matrix(X, 4,5)
a = 1 # alpha
## Solver basics:
Dmat = diag(length(X))
Amat = t(A)
#bvec = c(rep(1,4),rep(0,12))
bvec = c(rep(1,4),rep(0,15))
# Generate posterior samples:
N = 10000
piPost = array(0,dim=c(4,5,N))
for (i in 1:4){
piPost[i,,] = t(rDirichlet(N, alpha = (data[i,]+a)))
}
# Project posterior samples:
piPostProj = array(0,dim=c(4,5,N))
distPost = double(N)
for (n in 1:N){
temp = c(piPost[,,n])
sol = solve.QP(Dmat, temp, Amat, bvec, meq = 4)$solution
piPostProj[,,n] = matrix(sol,4,5)
distPost[n] = norm(piPost[,,n]-piPostProj[,,n], type = "F")
}
piPostProjMean = apply(piPostProj, 1:2, mean)
X = matrix(k, 4,5, byrow=T)
predicted_means_proj = array(0,dim=c(4,5))
for (i in 1:4){
predicted_means_proj[i,] = rowSums(X)[i]*piPostProjMean[i,]
}
error_proj = X/predicted_means_proj
mean(error_proj)
piPostProj[,,1]
piPostProj[,,10]
piPostProj[,,100]
piPostProj[,,1000]
piPostProj[1,1,]
plot(c(piPostProj[1,1,]))
plot(1:10)
plot(c(piPostProj[1,1,]),type="l")
plot(post_samples[,1,1])
plot(post_samples[,1,1], type="l")
for (i in 1:19) ESS_constr[i] = (N-B)/iact(post_samples[,i])
size(post_samples)
dim(post_samples)
for (i in 1:19) ESS_constr[i] = (N-B)/iact(samp[,i])
ESS_constr = numeric(19)
for (i in 1:19) ESS_constr[i] = (N-B)/iact(samp[,i])
dim(samp)
for (i in 1:19) ESS_constr[i] = (N-B)/iact(samp[i,])
dim(piPostProj)
ESS_proj = numeric(0,4,5)
for (i in 1:4){
for (j in 1:5){
ESS_proj[i,j] = N/iact(piPostProj[i,j,])
}
}
ESS_proj = numeric(0,dim=(4,5))
ESS_proj = numeric(0,dim=c(4,5))
ESS_proj = matrix(0,4,5)
for (i in 1:4){
for (j in 1:5){
ESS_proj[i,j] = N/iact(piPostProj[i,j,])
}
}
## Generate prior samples:
piPrior = array(0,dim=c(4,5,N))
ESS_proj
plot(c(piPostProj[1,1,]),type="l")
plot(c(piPostProj[1,2,]),type="l")
iact(c(piPostProj[1,2,]))
iact(c(piPostProj[2,2,]))
error_proj = X/predicted_means_proj
error_proj
mean(error_proj)
mean(error_constr)
library(multinomineq)
library(dirmcmc)
k = c(59,48,44,43,25, 21,14,4,46,44, 54,49,48,47,64, 58,32,30,31,41)
model <- function(x)
x[1]<x[6] & x[1]+x[2]<x[6]+x[7] & x[1]+x[2]+x[3]<x[6]+x[7]+x[8] &
x[1]+x[2]+x[3]+x[4]<x[6]+x[7]+x[8]+x[9] &
x[6]<x[11] & x[6]+x[7]<x[11]+x[12] & x[6]+x[7]+x[8]<x[11]+x[12]+x[13] &
x[6]+x[7]+x[8]+x[9]<x[11]+x[12]+x[13]+x[14] &
x[11]<x[16] & x[11]+x[12]<x[16]+x[17] & x[11]+x[12]+x[13]<x[16]+x[17]+x[18] &
x[11]+x[12]+x[13]+x[14]<x[16]+x[17]+x[18]+x[19]
N = 10000
B = 2000
mcmc <- sampling_nonlinear(k=k, options=20, inside=model, M=N, burnin=B,  prior=rep(1,20))
library(multinomineq)
library(dirmcmc)
model <- function(x)
x[1]<x[6] & x[1]+x[2]<x[6]+x[7] & x[1]+x[2]+x[3]<x[6]+x[7]+x[8] &
x[1]+x[2]+x[3]+x[4]<x[6]+x[7]+x[8]+x[9] &
x[6]<x[11] & x[6]+x[7]<x[11]+x[12] & x[6]+x[7]+x[8]<x[11]+x[12]+x[13] &
x[6]+x[7]+x[8]+x[9]<x[11]+x[12]+x[13]+x[14] &
x[11]<x[16] & x[11]+x[12]<x[16]+x[17] & x[11]+x[12]+x[13]<x[16]+x[17]+x[18] &
x[11]+x[12]+x[13]+x[14]<x[16]+x[17]+x[18]+x[19]
N = 10000
B = 2000
mcmc <- sampling_nonlinear(k=k, options=20, inside=model, M=N, burnin=B,  prior=rep(1,20))
dim(mcmc)
#
ESS = numeric(19)
for (i in 1:19) ESS[i] = (M-B)/iact(mcmc[,i])
#
plot(colMeans(mcmc)/k[1:19])
post_samples = array(0,dim=c(dim(mcmc)[1],4,5))
for (n in 1:dim(mcmc)[1]) {
post_samples[n,,1:4] = matrix(mcmc[n,],4,4, byrow=T)
for (j in 1:4){
post_samples[n,j,5] = 1-sum(post_samples[n,j,1:4])
}
}
dim(post_samples)
for (n in 1:dim(mcmc)[1]) {
post_samples[n,,1:4] = matrix(mcmc[n,],4,4, byrow=T)
for (j in 1:4){
post_samples[n,j,5] = 1-sum(post_samples[n,j,1:4])
}
}
warnings()
